pipeline {
  agent {
    kubernetes {
      cloud 'openshift'
      label "mp-${UUID.randomUUID().toString()}"
      yaml """
apiVersion: v1
kind: Pod
spec:
  securityContext:
    runAsUser: 0
  containers:
  - name: helmsman
    image: docker-registry.default.svc:5000/labs-ci-cd/helmsman-oc:v1.7.3-helm-v2.11.0
    command: ['cat']
    tty: true
  - name: java-build-tools
    image: docker-registry.default.svc:5000/labs-ci-cd/java-build-tools:edge
    command: ['cat']
    tty: true
    volumeMounts:
    - name: dockersock
      mountPath: /var/run/docker.sock
  volumes:
  - name: dockersock
    hostPath:
      path: /var/run/docker.sock
"""
    }
  }
  environment {
    CONTAINER_NAME = "squarer"
    DOCKER_REPO = "docker-registry.default.svc:5000/labs-ci-cd"
    AWS_DEFAULT_REGION = "us-east-1"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '5'))
    timestamps()
  }
  stages {
    stage('Validate, Build, Test') {
      steps {
        container('java-build-tools') {
          withSonarQubeEnv('sonar') {
            // Ideally this should be broken up into 4 stages (Validate, Build, Test, Build Docker),
            // but putting them all in the same gradle command ensures that there aren't any tasks that get run twice.
            // TEMPORARILY REMOVE SONARQUBE
            // sh '''
            //   ./gradlew -Pprod clean liquibaseValidate test bootWar jibDockerBuild sonar \
            //   -Dsonar.host.url=$SONAR_HOST_URL \
            //   -Dsonar.login=$SONAR_AUTH_TOKEN \
            //   -Dsonar.branch=$GIT_BRANCH \
            //   --no-daemon
            // '''
            sh '''
              ./gradlew -Pprod clean test bootWar jibDockerBuild --no-daemon
            '''
          }
        }
      }
      post {
        always {
          junit 'build/**/TEST-*.xml'
        }
      }
    }
    //stage("SonarQube Quality Gate") {
    //  steps {
    //    retry(60) {
    //      script {
    //        try {
    //          timeout(time: 10, unit: 'SECONDS') {
    //            def qg = waitForQualityGate()
    //            if (qg.status != 'OK' && qg.status != 'IN_PROGRESS' && qg.status != 'WARN') {
    //              error "Pipeline aborted due to quality gate failure: ${qg.status}"
    //            }
    //          }
    //        } catch(org.jenkinsci.plugins.workflow.steps.FlowInterruptedException err) {
    //          error "Timeout. ${err}"
    //        }
    //      }
    //    }
    //  }
    //}
    stage('Login Docker') {
      when {
        anyOf {
          branch 'ci'
          branch 'master'
          branch 'feature/Jenkinsfile'
        }
      }
      steps {
        container('java-build-tools') {
          withCredentials([string(credentialsId: '1a12dfa4-7fc5-47a7-aa17-cc56572a41c7', variable: 'JENKINS_TOKEN')]) {
            sh '''
              docker login -u jenkins -p ${JENKINS_TOKEN} docker-registry.default.svc:5000
            '''
          }
        }
      }
    }
    stage('Push Revision') {
      when {
        anyOf {
          branch 'ci'
          branch 'master'
          branch 'feature/Jenkinsfile'
        }
      }
      steps {
        container('java-build-tools') {
          sh '''
            docker tag $CONTAINER_NAME:latest ${DOCKER_REPO}/${CONTAINER_NAME}:git-$(git rev-parse HEAD)
            docker push ${DOCKER_REPO}/${CONTAINER_NAME}:git-$(git rev-parse HEAD)
          '''
        }
      }
    }
    stage('Push Unstable') {
      when {
        anyOf {
          branch 'ci'
          branch 'feature/Jenkinsfile'
        }
      }
      steps {
        container('java-build-tools') {
          sh '''
            docker tag $CONTAINER_NAME:latest ${DOCKER_REPO}/${CONTAINER_NAME}:unstable
            docker push ${DOCKER_REPO}/${CONTAINER_NAME}:unstable
          '''
        }
      }
    }
    stage('Push Edge') {
      when {
        branch 'master'
      }
      steps {
        container ('java-build-tools') {
          sh '''
            docker tag $CONTAINER_NAME:latest $DOCKER_REPO:edge
            docker push $DOCKER_REPO:edge
          '''
        }
      }
    }
    stage('Deploy') {
      when {
        anyOf {
          branch 'ci'
          branch 'master'
          branch 'feature/Jenkinsfile'
        }
      }
      steps {
        container ('helmsman') {          
          withCredentials([string(credentialsId: '1a12dfa4-7fc5-47a7-aa17-cc56572a41c7', variable: 'JENKINS_TOKEN')]) {
            withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID')]) {
              withCredentials([string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                withCredentials([string(credentialsId: 'app-database-password', variable: 'APP_DATABASE_PASSWORD')]) {
                  withCredentials([string(credentialsId: 'aldorisioj-github-token', variable: 'GITHUB_TOKEN')]) {
                    withCredentials([string(credentialsId: 'jwt-secret-token', variable: 'JWT_SECRET_TOKEN')]) {
                      sh '''
                        git clone https://aldorisioj:${GITHUB_TOKEN}@github.com/ZolonTech/egis-techchallenge-ops
                        cd egis-techchallenge-ops
                        oc login https://ocpegis.hnybdgr.net:443 --token=${JENKINS_TOKEN}
                        DEPLOY_TAG=git-$(git rev-parse HEAD) DOCKER_REPO=${DOCKER_REPO} KUBE_CTX=$(kubectl config current-context) \
                        JWT_SECRET_TOKEN=${JWT_SECRET_TOKEN} \
                        helmsman \
                        --debug --apply -f release/desired-state.yaml
                      '''
                      //${BRANCH_NAME}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
